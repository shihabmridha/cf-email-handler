openapi: 3.0.0
info:
  title: Email Handler API
  version: 1.0.0
  description: API for managing email handling and routing

servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    BaseDto:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DraftDto:
      allOf:
        - $ref: '#/components/schemas/BaseDto'
        - type: object
          required:
            - userId
            - subject
          properties:
            userId:
              type: integer
            sender:
              type: string
            recipients:
              type: array
              items:
                type: string
            cc:
              type: string
            subject:
              type: string
            body:
              type: string

    ProviderConfigDto:
      allOf:
        - $ref: '#/components/schemas/BaseDto'
        - type: object
          required:
            - name
            - userId
            - type
            - domain
          properties:
            name:
              type: string
            userId:
              type: integer
            type:
              type: integer
              enum: [0, 1, 2]
              description: '0: UNKNOWN, 1: RESEND, 2: MAILTRAP'
            domain:
              type: string
            smtp:
              type: object
              properties:
                host:
                  type: string
                port:
                  type: integer
                secure:
                  type: boolean
                username:
                  type: string
                password:
                  type: string
            api:
              type: object
              properties:
                token:
                  type: string
                host:
                  type: string
            enabled:
              type: boolean

    EmailRouteDto:
      allOf:
        - $ref: '#/components/schemas/BaseDto'
        - type: object
          required:
            - userId
            - email
            - destination
            - type
          properties:
            userId:
              type: integer
            email:
              type: string
              format: email
            destination:
              type: string
            type:
              type: string
              enum: [UNKNOWN, OTP, INVOICE, PROMOTIONAL]
            enabled:
              type: boolean
            drop:
              type: boolean
            received:
              type: integer
              readOnly: true
            sent:
              type: integer
              readOnly: true

    IncomingHistoryDto:
      allOf:
        - $ref: '#/components/schemas/BaseDto'
        - type: object
          required:
            - fromEmail
            - toEmail
            - subject
          properties:
            fromEmail:
              type: string
              format: email
            toEmail:
              type: string
              format: email
            subject:
              type: string
            destination:
              type: string
            emailClass:
              type: string
              enum: [UNKNOWN, OTP, INVOICE, PROMOTIONAL]
            summary:
              type: string

    SendMailDto:
      type: object
      required:
        - providerConfigId
        - content
      properties:
        providerConfigId:
          type: integer
        content:
          type: object
          required:
            - from
            - fromName
            - to
            - subject
          properties:
            from:
              type: string
            fromName:
              type: string
            to:
              type: array
              items:
                type: string
            cc:
              type: array
              items:
                type: string
            subject:
              type: string
            text:
              type: string
            html:
              type: string

    SettingsDto:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
        description:
          type: string

    SettingsResponseDto:
      allOf:
        - $ref: '#/components/schemas/BaseDto'
        - $ref: '#/components/schemas/SettingsDto'

paths:
  /login:
    post:
      summary: Login to get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /drafts:
    get:
      summary: Get all drafts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of drafts
          content:
            application/json:
              schema:
                type: object
                properties:
                  drafts:
                    type: array
                    items:
                      $ref: '#/components/schemas/DraftDto'

    post:
      summary: Create a new draft
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftDto'
      responses:
        '201':
          description: Draft created
          content: {}

  /drafts/{id}:
    put:
      summary: Update a draft
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftDto'
      responses:
        '204':
          description: Draft updated
          content: {}

    delete:
      summary: Delete a draft
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Draft deleted
          content: {}

  /provider-configs:
    get:
      summary: Get all provider configurations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of provider configurations
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderConfigDto'

    post:
      summary: Create a new provider configuration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderConfigDto'
      responses:
        '201':
          description: Provider configuration created successfully
          content: {}

  /provider-configs/{id}:
    put:
      summary: Update a provider configuration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderConfigDto'
      responses:
        '204':
          description: Provider configuration updated successfully
          content: {}

    delete:
      summary: Delete a provider configuration
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Provider configuration deleted successfully
          content: {}

  /provider-configs/type/{type}:
    get:
      summary: Get provider configuration by type
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: integer
            enum: [0, 1, 2]
            description: '0: UNKNOWN, 1: RESEND, 2: MAILTRAP'
      responses:
        '200':
          description: Provider configuration for the specified type
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider:
                    $ref: '#/components/schemas/ProviderConfigDto'

  /email-route:
    get:
      summary: Get all email routes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of email routes
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailRouteDto'

    post:
      summary: Create a new email route
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRouteDto'
      responses:
        '201':
          description: Email route created
          content: {}

  /email-route/{id}:
    put:
      summary: Update an email route
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRouteDto'
      responses:
        '204':
          description: Email route updated
          content: {}

    delete:
      summary: Delete an email route
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Email route deleted
          content: {}

  /email/send:
    post:
      summary: Send an email
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMailDto'
      responses:
        '201':
          description: Email sent successfully
          content: {}

  /config/forward-to:
    get:
      summary: Get the forward to email configuration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Forward to email configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email

  /incoming-history:
    get:
      summary: Get incoming email history
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of incoming email history
          content:
            application/json:
              schema:
                type: object
                properties:
                  histories:
                    type: array
                    items:
                      $ref: '#/components/schemas/IncomingHistoryDto'

    post:
      summary: Create a new incoming email history record
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomingHistoryDto'
      responses:
        '201':
          description: Incoming email history record created
          content: {}

  /settings:
    get:
      summary: Get all settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: array
                    items:
                      $ref: '#/components/schemas/SettingsResponseDto'

    post:
      summary: Create a new setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsDto'
      responses:
        '201':
          description: Setting created
          content:
            application/json:
              schema:
                type: object
                properties:
                  setting:
                    $ref: '#/components/schemas/SettingsResponseDto'

  /settings/{key}:
    get:
      summary: Get a setting by key
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Setting details
          content:
            application/json:
              schema:
                type: object
                properties:
                  setting:
                    $ref: '#/components/schemas/SettingsResponseDto'
        '404':
          description: Setting not found

    put:
      summary: Update a setting
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsDto'
      responses:
        '200':
          description: Setting updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  setting:
                    $ref: '#/components/schemas/SettingsResponseDto'

    delete:
      summary: Delete a setting
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Setting deleted
          content: {}
